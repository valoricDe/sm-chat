type ChatMessage implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  id: ID!
  rowId: Int!
  message: String!
  username: String!
  updated: Datetime
}

# A condition to be used against `ChatMessage` object types. All fields are tested
# for equality and combined with a logical ‘and.’
input ChatMessageCondition {
  # Checks for equality with the object’s `rowId` field.
  rowId: Int

  # Checks for equality with the object’s `message` field.
  message: String

  # Checks for equality with the object’s `username` field.
  username: String

  # Checks for equality with the object’s `updated` field.
  updated: Datetime
}

# An input for mutations affecting `ChatMessage`
input ChatMessageInput {
  rowId: Int
  message: String!
  username: String!
  updated: Datetime
}

# Represents an update to a `ChatMessage`. Fields that are set will be updated.
input ChatMessagePatch {
  rowId: Int
  message: String
  username: String
  updated: Datetime
}

# A connection to a list of `ChatMessage` values.
type ChatMessagesConnection {
  # A list of `ChatMessage` objects.
  nodes: [ChatMessage]!

  # A list of edges which contains the `ChatMessage` and cursor to aid in pagination.
  edges: [ChatMessagesEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `ChatMessage` you could get from the connection.
  totalCount: Int
}

# A `ChatMessage` edge in the connection.
type ChatMessagesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `ChatMessage` at the end of the edge.
  node: ChatMessage!
}

# Methods to use when ordering `ChatMessage`.
enum ChatMessagesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  MESSAGE_ASC
  MESSAGE_DESC
  USERNAME_ASC
  USERNAME_DESC
  UPDATED_ASC
  UPDATED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

# All input for the create `ChatMessage` mutation.
input CreateChatMessageInput {
  # An arbitrary string value with no semantic meaning. Will be included in the
  # payload verbatim. May be used to track mutations by the client.
  clientMutationId: String

  # The `ChatMessage` to be created by this mutation.
  chatMessage: ChatMessageInput!
}

# The output of our create `ChatMessage` mutation.
type CreateChatMessagePayload {
  # The exact same `clientMutationId` that was provided in the mutation input,
  # unchanged and unused. May be used by a client to track mutations.
  clientMutationId: String

  # The `ChatMessage` that was created by this mutation.
  chatMessage: ChatMessage

  # Our root query field type. Allows us to run any query from our mutation payload.
  query: Query

  # An edge for the type. May be used by Relay 1.
  chatMessageEdge(
    # The method to use when ordering `ChatMessage`.
    orderBy: ChatMessagesOrderBy = PRIMARY_KEY_ASC
  ): ChatMessagesEdge
}

# A location in a connection that can be used for resuming pagination.
scalar Cursor

# A point in time as described by the [ISO
# 8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
scalar Datetime

# All input for the `deleteChatMessageByRowId` mutation.
input DeleteChatMessageByRowIdInput {
  # An arbitrary string value with no semantic meaning. Will be included in the
  # payload verbatim. May be used to track mutations by the client.
  clientMutationId: String
  rowId: Int!
}

# All input for the `deleteChatMessage` mutation.
input DeleteChatMessageInput {
  # An arbitrary string value with no semantic meaning. Will be included in the
  # payload verbatim. May be used to track mutations by the client.
  clientMutationId: String

  # The globally unique `ID` which will identify a single `ChatMessage` to be deleted.
  id: ID!
}

# The output of our delete `ChatMessage` mutation.
type DeleteChatMessagePayload {
  # The exact same `clientMutationId` that was provided in the mutation input,
  # unchanged and unused. May be used by a client to track mutations.
  clientMutationId: String

  # The `ChatMessage` that was deleted by this mutation.
  chatMessage: ChatMessage
  deletedChatMessageId: ID

  # Our root query field type. Allows us to run any query from our mutation payload.
  query: Query

  # An edge for the type. May be used by Relay 1.
  chatMessageEdge(
    # The method to use when ordering `ChatMessage`.
    orderBy: ChatMessagesOrderBy = PRIMARY_KEY_ASC
  ): ChatMessagesEdge
}

# The root mutation type which contains root level fields which mutate data.
type Mutation {
  # Creates a single `ChatMessage`.
  createChatMessage(
    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    input: CreateChatMessageInput!
  ): CreateChatMessagePayload

  # Updates a single `ChatMessage` using its globally unique id and a patch.
  updateChatMessage(
    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    input: UpdateChatMessageInput!
  ): UpdateChatMessagePayload

  # Updates a single `ChatMessage` using a unique key and a patch.
  updateChatMessageByRowId(
    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    input: UpdateChatMessageByRowIdInput!
  ): UpdateChatMessagePayload

  # Deletes a single `ChatMessage` using its globally unique id.
  deleteChatMessage(
    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    input: DeleteChatMessageInput!
  ): DeleteChatMessagePayload

  # Deletes a single `ChatMessage` using a unique key.
  deleteChatMessageByRowId(
    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    input: DeleteChatMessageByRowIdInput!
  ): DeleteChatMessagePayload
}

# An object with a globally unique `ID`.
interface Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: Cursor

  # When paginating forwards, the cursor to continue.
  endCursor: Cursor
}

# The root query type which gives access points into the data universe.
type Query implements Node {
  # Exposes the root query type nested one level down. This is helpful for Relay 1
  # which can only query top level fields if they are in a particular form.
  query: Query!

  # The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  id: ID!

  # Fetches an object given its globally unique `ID`.
  node(
    # The globally unique `ID`.
    id: ID!
  ): Node

  # Reads and enables pagination through a set of `ChatMessage`.
  allChatMessages(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `ChatMessage`.
    orderBy: ChatMessagesOrderBy = PRIMARY_KEY_ASC

    # A condition to be used in determining which values should be returned by the collection.
    condition: ChatMessageCondition
  ): ChatMessagesConnection
  chatMessageByRowId(rowId: Int!): ChatMessage

  # Reads a single `ChatMessage` using its globally unique `ID`.
  chatMessage(
    # The globally unique `ID` to be used in selecting a single `ChatMessage`.
    id: ID!
  ): ChatMessage
}

# All input for the `updateChatMessageByRowId` mutation.
input UpdateChatMessageByRowIdInput {
  # An arbitrary string value with no semantic meaning. Will be included in the
  # payload verbatim. May be used to track mutations by the client.
  clientMutationId: String

  # An object where the defined keys will be set on the `ChatMessage` being updated.
  chatMessagePatch: ChatMessagePatch!
  rowId: Int!
}

# All input for the `updateChatMessage` mutation.
input UpdateChatMessageInput {
  # An arbitrary string value with no semantic meaning. Will be included in the
  # payload verbatim. May be used to track mutations by the client.
  clientMutationId: String

  # The globally unique `ID` which will identify a single `ChatMessage` to be updated.
  id: ID!

  # An object where the defined keys will be set on the `ChatMessage` being updated.
  chatMessagePatch: ChatMessagePatch!
}

# The output of our update `ChatMessage` mutation.
type UpdateChatMessagePayload {
  # The exact same `clientMutationId` that was provided in the mutation input,
  # unchanged and unused. May be used by a client to track mutations.
  clientMutationId: String

  # The `ChatMessage` that was updated by this mutation.
  chatMessage: ChatMessage

  # Our root query field type. Allows us to run any query from our mutation payload.
  query: Query

  # An edge for the type. May be used by Relay 1.
  chatMessageEdge(
    # The method to use when ordering `ChatMessage`.
    orderBy: ChatMessagesOrderBy = PRIMARY_KEY_ASC
  ): ChatMessagesEdge
}
